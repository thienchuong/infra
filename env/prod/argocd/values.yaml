argocd:
  fullnameOverride: "argocd"
  redis-ha:
    enabled: true
  controller:
    replicas: 1
    enableStatefulSet: true
    args:
      statusProcessors: "20"
      operationProcessors: "10"
      appResyncPeriod: "45"
      selfHealTimeout: "5"
      repoServerTimeoutSeconds: "60"
  server:
    ingress:
      enabled: false
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      ingressClassName: "alb"
      hosts:
        - argocd-production-nicholasgate.io
      tls:
        - secretName: somsecret
          hosts:
            - argocd-production-nicholasgate.io
    # config:
    #   url: https://argocd-tv-in-production.tsengineering.io
    #   application.instanceLabelKey: argocd.argoproj.io/instance
    #   dex.config: |-
    #     connectors:
    #         - config:
    #             issuer: https://accounts.google.com
    #             clientID: "xxx.apps.googleusercontent.com"
    #             clientSecret: "xxx"
    #           type: oidc
    #           id: google
    #           name: Google
    #   resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |-
    #     jqPathExpressions:
    #         - '.webhooks[]?.clientConfig.caBundle'
    # rbacConfig:
    #   policy.csv: |-
    #     p, role:dev, applications, get, project-dev/*, allow
    #     p, role:dev, applications, delete, project-dev/*, allow
    #     p, role:dev, applications, sync, project-dev/*, allow
    #     p, role:dev, exec, create, project-dev/*, allow
    #     p, role:dev, clusters, *, *, deny
    #     p, role:dev, projects, *, *, deny
    #     p, role:dev, repositories, *, *, deny
    #     p, role:dev, certificates, *, *, deny
    #     p, role:dev, accounts, *, *, deny
    #     g, thienchuong004@gmail.com, role:admin
    #     g, thienchuong005@gmail.com, role:dev
    #   policy.default: ""
    #   scopes: '[email, group]'
    autoscaling:
      enabled: true
      minReplicas: 1
    resources: # Adjust based on your specific use case (required for HPA)
      requests:
        cpu: '100m'
        memory: '256Mi'
      limits:
        cpu: '200m'
        memory: '512Mi'
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1
    resources: # Adjust based on your specific use case (required for HPA)
      requests:
        cpu: '100m'
        memory: '256Mi'
      limits:
        cpu: '200m'
        memory: '512Mi'
  applicationSet:
    replicaCount: 1 # The controller doesn't scale horizontally, is active-standby replicas
